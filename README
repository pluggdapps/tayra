{{ Toc( float='right' ) }}

h3. Installation

There are multiple ways to install tayra and the easiest way is by easy_install.

{{{ Code bash

  # -Z to do unzipped install. The reason for installing it
  #    in un-zipped form is to make use of the command line tool.
  # -U to upgrade install
  easy_install -Z -U tayra

}}}

''Install from source code''

You can obtain the source code by,
downloading the latest [[ http://pypi.python.org/pypi/tayra | tar.gz ]] or
cloning from mercurial repositories

{{{ Code bash

  hg clone https://code.google.com/p/tayra/
  # or
  hg clone https://bitbucket.org/prataprc/tayra

}}}

After untarring the source package, or cloning the source repository into
your local machine, install source package by executing
> [<PRE sudo python ./setup.py install >]
to install the development  version, do,
> [<PRE sudo python ./setup.py develop >]

h3. Command line usage

Make sure that tayra package is installed in your environment (using
easy_install) or available via //PYTHONPATH//. 
''tayra/tyr.py'' script under tayra-package can be used as command
line tool. Either invoke it from its original path, or create a symbolic link
to a bin/ directory.

script-file:    <site-package>/tayra/tyr.py

symbolic link to your binary path, like,

{{{ Code bash

    ln -s <site-package>/tayra/tyr.py $(HOME)/bin/tyr.py
    # or,
    ln -s <site-package>/tayra/tyr.py /usr/bin/tyr.py

}}}

Once `tyr.py` is available as an executable command and `tayra` module 
in your python path, use the command-line tool, like,

{{{ Code bash

  # A corresponding .html file will be generated in the same directory
  tyr.py <template-file>
  # For more help, try
  tyr.py -h

}}}
   
h3. Using it as library, in python

{{{ Code python
    from   tayra  import Renderer

    # `ttlloc` specifies the path to template file, ttlloc is interpreted as
    # relative path or asset specification format
    # `ttlconfig` passes the configuration parameters
    r = Renderer( ttlloc=ttlloc, ttlconfig=ttlconfig )
    # Context is python dictionary that will be imported into template namespace
    html = r( context=context )
    codecs.open( htmlfile, mode='w', encoding=encoding).write( html )

    # To pass template text directly (instead of file-path)
    r = Renderer( ttltext=ttltext, ttlconfig=ttlconfig )
    html = r( context=context )

}}}
  
h3. Development

It is always better to setup the development tree under a virtual environemnt.
To begin with, first checkout the source tree from the latest repository tree
and then use the ''make'' command to create a development environment.

{{{ Code sh
  cd tayra
  make develop
}}}

which,
* sets-up a virtual environment under // tayra-env/ // directory.
* Installs tayra under the virtual environment in development mode,
  [<PRE python ./setup.py develop >]

To start using the tayra package, enter the virtual environment by doing,
``{c} source ./tayra-env/bin/activate ``

''To create an egg packages'',

{{{ Code bash
  make bdist_egg        # For creating binary distribution
  make sdist            # For creating source distribution
}}}

The .egg package will be availabe under dist/ directory

''To test the package'',

{{{ Code bash
  source tayra-env/bin/activate
  make test
}}}

''Finally, Build the egg and upload it into pypi''

{{{ Code bash
  make upload
}}}

-----

{{{ Nested 
# { 'font-size' : 'small', 'color' : 'gray' }
Document edited using Vim <br>
/* vim: set filetype=etx : */
}}}

