1. Check paper.js (Javascript+canvas) and see how one can write plugins in
   tayra using that.

Feature requests :

* @use directive should include ${...} expression evaluation syntax.

* For attributes, the value, along with the "=" character, can be omitted
  altogether if the value is the empty string, eg,
    disabled, selected etc ...
  In some cases the attribute values can be specified as an atom, like
    disabled=disabled.

* inlinetag, `contents` must include inline-tag elements.

* Sandbox the execution environment for the templates.
    implement interface. do isintance( <interface>, Interface ) to make sure it
    is alright.

* Optional configuration to ignore indentation output.

* Nested functions should remain nested !

* Micro-templating similar to mako. This will demonstrate the true power of
  StackMachine based design.

* find out an inheritable way for generic tag handling parts. Especially
  composing tags during compile time and thus avoiding handletag() during
  run-time.

* Figure out a way to cache the plugins catogarised by initplugins() function.

* Automatically detect the user-agent compatibility level with html and
  generate elements in confirmance to it. This must play safe with the
  following knobs,
    - doctype specification in ttl file
    - encoding specification in ttl file
    - language specification in ttl file
    - config params passed to compile the ttl file
    - HTTP headers (or any other real-time info available from user agent)
      denoting the user agent capabilities.

* Just saw Adobe Egdge ... Can tayra be the keyboard version for addressing
  the same market place as Adobe's ?

* Whitespace pruning,
    before and after opening tag and closing tag (for outerprune)

* Enable file check, using `reload_templates` ttlconfig, so that the
  intermediate template files and in memory code cache will be regenerated
  when ever the file is updated.

* Custom tag plugin for form generation.

* Standard tag for SVG.

* Ruby's code-block style syntax to write event-handlers for tag-elements.

* @charset directive is pretty much a stale feature. Figure out how to use
  that, without compromising on ttlconfig['input_encoding']

* html-entity-escaping in escape-filters, should text-contents need escape
  filtering as well ?
