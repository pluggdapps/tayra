1. Check paper.js (Javascript+canvas) and see how one can write plugins in
   tayra using that.

Feature requests :

* Remove the redundant opening after push_state.

* Syntax to break the text.

* ITayraTag plugin registration using namespace like,
    html
    html.jq
    html.form
    html.form.jq

-----

* Do not maintain context information with `igen` instead maintain that with
  parser object.

* Automatically detect the user-agent compatibility level with html and
  generate elements in confirmance to it. This must play safe with the
  following knobs,
    - doctype specification in ttl file
    - encoding specification in ttl file
    - language specification in ttl file
    - config params passed to compile the ttl file
    - HTTP headers (or any other real-time info available from user agent)
      denoting the user agent capabilities.

* Just saw Adobe Egdge ... Can tayra be the keyboard version for addressing
  the same market place as Adobe's ?

* Whitespace pruning,
    before and after opening tag and closing tag (for outerprune)

* Enable file check, using `reload_templates` ttlconfig, so that the
  intermediate template files and in memory code cache will be regenerated
  when ever the file is updated.

* Figure out a way to cache the plugins catogarised by initplugins() function.

* Custom tag plugin for form generation.

* Standard tag for SVG.

* Ruby's code-block style syntax to write event-handlers for tag-elements.

* @charset directive is pretty much a stale feature. Figure out how to use
  that, without compromising on ttlconfig['input_encoding']

* html-entity-escaping in escape-filters, should text-contents need escape
  filtering as well ?

* For attributes, the value, along with the "=" character, can be omitted
  altogether if the value is the empty string, eg,
    disabled, selected etc ...
  To be handled as specifier option.

* Enable wiki text as content selectable using the tag's specifier. like,
    <div etx> **hello** world

* making `devmod` as False seems to have degrading effect on performance.

* Micro-templating similar to mako. This will demonstrate the true power of
  StackMachine based design.
  This requires a change in the filter-block syntax and symantics. It would be
  better if it is possible to parse the filter-block as signature + siblings.

* Find a way to pass the body arguments programmatically via Renderer()

* Generate beautiful html, using lxml
