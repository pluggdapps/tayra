1. Check paper.js (Javascript+canvas) and see how one can write plugins in
   tayra using that.

Feature requests :

* escape-filters for expression evaluation,
    html-entity-escaping

* Enable file check, using `reload_templates` ttlconfig, so that the
  intermediate template files and in memory code cache will be regenerated
  when ever the file is updated.

* Whitespace pruning,
    before and after opening tag and closing tag (for outerprune)

* @use directive should include ${...} expression evaluation syntax.

* Micro-templating similar to mako. This will demonstrate the true power of
  StackMachine based design.

* Custom tag plugin for form generation.

* Standard tag for SVG.

* Automatically detect the user-agent compatibility level with html and
  generate elements in confirmance to it. This must play safe with the
  following knobs,
    - doctype specification in ttl file
    - encoding specification in ttl file
    - language specification in ttl file
    - config params passed to compile the ttl file
    - HTTP headers (or any other real-time info available from user agent)
      denoting the user agent capabilities.

* Unicode support using the philosopy,
    decode early, encode late.

* Ruby's code-block style syntax to write event-handlers for tag-elements.

* Sandbox the execution environment for the templates.

* Let tag plugins be bolted at AST level.

* Optional configuration to ignore indentation output.

* `tagline` grammar can include multiple tag definition contained within the
  same tagline as a `sibling`.

* Escape grammar for special tokens.

* For attributes, the value, along with the "=" character, can be omitted
  altogether if the value is the empty string, eg,
    disabled, selected etc ...
  In some cases the attribute values can be specified as an atom, like
    disabled=disabled.

* Just saw Adobe Egdge ... Can tayra be the keyboard version for addressing
  the same market place as Adobe's ?
