glossary :

: .ttl ::
    Extension of files containing tayra templates. These templates can be
    compiled into an intermediate //.py// file which can them be loaded
    and executed (with context) to generate the final .html file.

    A key strength in tayra templates is that it is possible to create template
blocks as plugins and distribute them as packages. Tayra package comes with
initialization routines that can be used to pre-load the template plugins
provided by installed packages. If this initialization is not done explicitly,
it will automatically be done when compiling a .ttl file.
    Once template-plugins are loaded, they can be queried and consumed by parent
parent templates generating the final page.

h4. Interface specification

h4. Implementing interface specifications (a.k.a plugin)

h4. Exporting plugins

Template-plugins will have to be automatically loaded during tayra-module
initialization. This can happen only when there is a mechanism that provides a
list of plugin implementers (as .ttl files) as part of package entry-point.
Something like,
{{{ Code ini
  [tayra.plugins]
  ITTLPlugin = bootstrap.implement:TTLPlugins
}}}
to be more specific, //ITTLPlugin// is the interface specification for this
entry point.

:Gotcha ::
    Plugin implementers please note that the TTL plugins should have any
    code executing in the global context (for instance, using ``{b}fb-pycode
    global``) that depends on other plugins, it is bound to fail or
    trigger an error.
