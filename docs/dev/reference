The following is a non-exhaustive narrative reference of tayra template
language. 

Before continuing we will see how a snippet of ttl text looks like,

h3. Miscellaneous

Tayra templating language is made up of grammars with special tokens i.e few
characters and sequence of characters are interpreted differently. Hence
template authors should take special care when using them. Sometimes, it is
required to have the special characters part of the text. This document gives an
overview of how to handle such scenarios.

Characters that are special when occuring in the begnining of a line,

* ''whitespace'', if line begins with a blank-space, it will be consumed as
  indentation, except in the following cases,
  ** comment-blocks, spanning across multiple lines
  ** filter-blocks, between ``{y}:fb-`` and ``{y}:fbend``
* ''newlines'', which has a special-meaning, since indentation is expected to
  follow them.
* ''doctype'', starts with ``{y}!!!``, will generate html DOCTYPE.
* ''directives'', start with ``{y}@``, attaches special meaning to the
  template document.

These characters and character sequences are special anywhere inside the text.

* ''commentline'',  starts with ``{y}##``, will not skipped.
* ''comment-block'', starts with ``{y}<!--`` and ends with ``-->``, will be
  present in the output html.
* ''filter-block'', starts with ``{y}:fb-`` and ends with ``{y}:fbend``,
  can be extended with plugins
* ''statements'', starts with ``{y}@@``
* ''control-blocks'', if lines that follow beginning whitespace start with
  ``{y}@`` it will be interpreted as one of the many control blocks, like,
  function, if-else, while, for.

The following characters and sequences are special within the tag definition,
that comes between ''<''...''>'',

* ''newlines'', will be consumped as whitespace separating tokes.
* ''>'', will be consumed as end of tag definition.
* ''/>'', will be consumed as self-closing end of tag definition.
* ''${...}'', expression substitution.
* '' {...} '', element styling.
* ''" or ' '', string quotes.
* ''='', token that joins attribute name and value.
* ''!>'' and ''%>'', will prune the whitespace and indentations.
* The following characters and sequences are special within tag's style
  specification, that comes between ''{'' .... ''}''
  ** ''${...}'', expression substitution.

escaping special characters,
* To escape special characters, or to break special sequence of characters, use
  escape character, ''\''. This type of escaping is applicable anywhere in the
  text.

-----

{{{ Nested 
# { 'font-size' : 'small', 'color' : 'gray' }
Document edited using Vim <br>
/* vim: set filetype=etx : */
}}}
