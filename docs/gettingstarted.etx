{{ Toc( float='right' ) }}

h3. Install tayra

Installing via package management

{{{ Code bash
  # -Z to do unzipped install. The reason for installing it in un-zipped form
  #    is to make use of the command line tool.
  # -U to upgrade install
  easy_install -Z -U tayra
}}}

''Source code''

Download the latest tar.gz from http://pypi.python.org/pypi/tayra

Check out hg repository from [[ http://code.google.com/p/tayra/ | google-code ]] or
[[ https://bitbucket.org/prataprc/tayra | bit-bucket ]]
{{{ Code bash
  hg clone https://code.google.com/p/tayra/
  # or
  hg clone https://bitbucket.org/prataprc/tayra
}}}

h3. Command line usage

Make sure that tayra package is installed in your environment (using
easy_install) or available via //PYTHONPATH//. 
''tayra/tyr.py'' script under tayra-package can be used as command
line tool. Either invoke it from its original path, or create a symbolic link
to a bin/ directory.

script-file:    <site-package>/tayra/tyr.py

symbolic link to your binary path, like,

{{{ Code bash

    ln -s <site-package>/tayra/tyr.py $(HOME)/bin/tyr.py
    # or,
    ln -s <site-package>/tayra/tyr.py /usr/bin/tyr.py

}}}

Once `tyr.py` is available as an executable command and `tayra` module 
in your python path, use the command-line tool, like,

{{{ Code bash

  # A corresponding .html file will be generated in the same directory
  tyr.py <template-file>
  # For more help, try
  tyr.py -h

}}}
   
h3. Using it as library, in python

{{{ Code python
    from   tayraimport Renderer

    # `ttlloc` specifies the path to template file, ttlloc is interpreted as
    # relative path or asset specification format
    # `ttlconfig` passes the configuration parameters
    r = Renderer( ttlloc=ttlloc, ttlconfig=ttlconfig )
    html = r( context=context )
    codecs.open( htmlfile, mode='w', encoding=encoding).write( html )

    # To pass template text directly (instead of file-path)
    r = Renderer( ttltext=ttltext, ttlconfig=ttlconfig )
    html = r( context=context )

}}}
  
h3. Start templating

It starts with your .ttl file, where ''ttl'' stands for tayra template language.
Open your favorite editor and we will start writing our first template.
Ofcourse our first template is going to be a welcome message to this world.

{{{ Code ttl

## File name : eg1.ttl

<html>
  <head>
  <body>
    <p> hello world
}}}

Let us now translate this to a html document,

{{{ Code bash
# Assuming that tayra is available in your environment,
$ tayra/tyr.py eg1.ttl
}}}

which looks like,

{{{ Code html
# { 'background-color' : '#EEE' }
<html>
  <head></head>
  <body>
    <p> hello world</p>
  </body>
</html>
}}}

Now, we will add an id and couple of class attributes to the paragraph tag that
contains the //hello world// text.

{{{ Code ttl

## File name : eg1.ttl

<html>
  <head>
  <body>
    <p#welcome.intro.highlight> hello world
}}}

''#welcome'' attributes the tag with id-name //welcome// and
''.intro.highlight'' attributes the tag with class-names //intro// and
//highlight//. And our translated html looks like

{{{ Code html
# { 'background-color' : '#EEE' }
<html>
  <head></head>
  <body>
    <p id="welcome" class="intro highlight"> hello world</p>
  </body>
</html>
}}}

That is all it takes to get you started. You will know everything about tayra here.

-----

{{{ Nested 
# { 'font-size' : 'small', 'color' : 'gray' }
Document edited using Vim <br>
/* vim: set filetype=etx : */
}}}
